kind: ConfigMap 
apiVersion: v1 
metadata:
  name: k6-script
  namespace: load-generator
data:
  script.js: | 
    import { group, check, sleep } from "k6";
    import { Counter, Rate } from "k6/metrics";
    import http from "k6/http";

    export let options = {
      setupTimeout: "1200s",
      vus: 5,
      thresholds: {
        my_rate: ["rate>=0.4"], // Require my_rate's success rate to be >=40%
        http_req_duration: ["avg<1000"], // Require http_req_duration's average to be <1000ms
      }
    };

    let mCounter = new Counter("my_counter");
    let mRate = new Rate("my_rate");

    export default function() {
      check(Math.random(), {
        "top-level test": (v) => v < 1/3
      });
      group("my group", function() {
        mCounter.add(1, { tag: "test" });

        check(Math.random(), {
          "random value is < 0.5": (v) => mRate.add(v < 0.5),
        });

        // group("json", function() {
        // 	let res = http.get("https://httpbin.org/get", null, {
        // 		headers: { "X-Test": "abc123" },
        // 	});
        // 	check(res, {
        // 		"status is 200": (res) => res.status === 200,
        // 		"X-Test header is correct": (res) => res.json().headers['X-Test'] === "abc123",
        // 	});
        // 	// console.log(res.body);
        // });

        group("text", function() {
          check(http.get("http://35.193.35.118"), {
            "status is 200": (res) => res.status === 200,
            "content type is plain": (res) => res.headers['Content-Type'] === "text/plain",
            // "welcome message is correct": (res) => res.html("h2").text() === "Welcome to the LoadImpact.com demo site!",
          });
        });

        // group("nested", function() {
        // 	check(null, {
        // 		"always passes": true,
        // 		"always fails": false,
        // 	});
        // });
      });
      sleep(10 * Math.random());
    };


---

apiVersion: batch/v1
kind: Job
metadata:
  # name: test-load
  generateName: test-load-
  namespace: load-generator
spec:
  template:
    spec:
      containers:
      - env:
        - name: K6_OUT
          value: influxdb=http://influxdb.default.svc.cluster.local:8086/k6
        image: loadimpact/k6:latest
        name: k6
        command: ["k6", "run", "--vus", "10000", "--duration", "200s", "/scripts/script.js"]
        ports:
        - containerPort: 6565
        resources:
          limits:
            cpu: "16"
          requests:
            cpu: "14"
        volumeMounts:
        - mountPath: /scripts
          name: k6-claim0
      restartPolicy: Never
      volumes:
      - name: k6-claim0
        configMap:
          name: k6-script
      # nodeSelector:
      #   disktypenode.kubernetes.io/instance-type: n1-highcpu-96
  backoffLimit: 4
